basePath: /api/v1
definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/user.User'
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  auth.RegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  role.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  user.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:3001
info:
  contact: {}
  description: API for managing roles and users with RBAC.
  title: Role-Based Access Control API
  version: "1.0"
paths:
  /admin/roles:
    get:
      consumes:
      - application/json
      description: Retrieves all roles from the system
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            items:
              $ref: '#/definitions/role.Role'
            type: array
      summary: Get all roles
      tags:
      - Roles
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
      summary: User login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the role of CLIENT or PROVIDER
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
      summary: Register a new user
      tags:
      - Auth
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/user.User'
      summary: Get user by ID
      tags:
      - Users
  /users/all:
    get:
      consumes:
      - application/json
      description: Retrieves all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
      summary: Get all users
      tags:
      - Users
swagger: "2.0"
